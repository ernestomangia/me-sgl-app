@model ME.Libros.Web.Models.CompraItemViewModel

<div class="form-group form-group-sm">
    @Html.LabelFor(ci => ci.ProductoId, new { @class = "col-md-2 control-label" })
    <div class="col-md-10">
        @Html.DropDownListFor(ci => ci.ProductoId, Model.Productos, "Seleccione", new { @class = "form-control" })
    </div>
</div>
<div class="form-group form-group-sm">
    @Html.LabelFor(ci => ci.Cantidad, new { @class = "col-md-2 control-label" })
    <div class="col-md-10">
        @Html.TextBoxFor(ci => ci.Cantidad, new { @class = "form-control", placeholder = "Cantidad", maxlength = "4", autocomplete = "off" })
    </div>
</div>
<div class="form-group form-group-sm">
    @Html.LabelFor(ci => ci.PrecioCompraComprado, new { @class = "col-md-2 control-label" })
    <div class="col-md-10">
        <div class="input-group">
            <div class="input-group-addon">$</div>
            @Html.TextBoxFor(ci => ci.PrecioCompraComprado, new { @class = "form-control", placeholder = Messages.PrecioCompraComprado, maxlength = "8", autocomplete = "off" })
        </div>
        <span class="label label-primary">
            Precio Anterior: $
            <span id="precioSugerido">@(Model.ProductoId > 0 ? Html.DisplayTextFor(ci => ci.PrecioCompraCalculado).ToHtmlString() : "-")</span>
        </span>
    </div>
</div>
<div class="form-group form-group-sm">
    @Html.LabelFor(ci => ci.MontoItemComprado, new { @class = "col-md-2 control-label" })
    <div class="col-md-10">
        <div class="input-group">
            <div class="input-group-addon">$</div>
            @Html.TextBoxFor(ci => ci.MontoItemComprado, new { @class = "form-control", placeholder = Messages.MontoItemComprado, maxlength = "8", autocomplete = "off" })
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        setMaxlength();
        jQuery.validator.unobtrusive.parse("#formCompraItem");

        $("#Cantidad").rules("add", {
            min: 1,
            messages: {
                min: "La <b>Cantidad</b> debe ser mayor a 0 unidades</b>"
            }
        });

        $("#PrecioCompraComprado").rules("add", {
            min: 0,
            messages: {
                min: "El <b>Precio de compra comprado</b> debe ser mayor o igual a $ 0,00</b>"
            }
        });

        $("#MontoItemComprado").rules("add", {
            min: 0,
            messages: {
                min: "El <b>Subtotal comprado</b> debe ser mayor o igual a $ 0,00</b>"
            }
        });
    });

    $('#ProductoId').on('change', function () {
        getProducto();
    });

    $('#Cantidad').on('keyup change', function (e) {
        if (isValidKeyForCalc(e.keyCode)) {
            var precioCompraComprado = Globalize.parseFloat($("#PrecioCompraComprado").val());
            var precioCompraCalculado = Globalize.parseFloat($("#precioSugerido").text());
            calcularMontosItem(precioCompraCalculado, precioCompraComprado);
        }
    });

    $('#PrecioCompraComprado').on('keyup change', function (e) {
        if (isValidKeyForCalc(e.keyCode)) {
            var precioCompraComprado = Globalize.parseFloat($("#PrecioCompraComprado").val());
            calcularMontoItemComprado(precioCompraComprado);
        }
    });

    $('#MontoItemComprado').on('keyup change', function () {
        var montoItemComprado = Globalize.parseFloat($(this).val());
        var cantidad = parseInt($("#Cantidad").val());
        if (cantidad > 0 && montoItemComprado >= 0) {
            var precioCompraComprado = montoItemComprado / cantidad;
            $("#PrecioCompraComprado").val(formatFloat(precioCompraComprado));
        }
    });
</script>
