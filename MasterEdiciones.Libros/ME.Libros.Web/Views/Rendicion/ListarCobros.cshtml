@using ME.Libros.Utils.Enums
@using ME.Libros.Web.Extensions
@model ME.Libros.Web.Models.RendicionViewModel
@{
    var estado = new Dictionary<EstadoCuota, string>
    {
        { EstadoCuota.NoVencida, "default" },
        { EstadoCuota.Parcial, "warning" },
        { EstadoCuota.Atrasada, "danger" },
        { EstadoCuota.Pagada, "success" }
    };

    var crearRendicion = Model.Id == 0;
}

<table id="tablaResultado" class="dataTableCustom">
    <thead>
        <tr>
            <th class="columnaCodigo noSort">@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.Id)</th>
            <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.ClienteId)</th>
            <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.MontoVendido)</th>
            <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.MontoCobrado)</th>
            <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.Saldo)</th>
            @if (crearRendicion)
            {
                <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Numero)</th>
                <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Estado) cuota</th>
            }
            else
            {
                <th>Cuotas Canceladas</th>
            }
            <th>@Html.DisplayNameFor(model => model.Cobros[0].FechaCobro)</th>
            <th class="numero">@Html.DisplayNameFor(model => model.Cobros[0].Monto)</th>
        </tr>
    </thead>
    @for (var i = 0; i < Model.Cobros.Count; i++)
    {
        var cobro = Model.Cobros[i];
        <tr>
            <td>@Html.DisplayFor(model => cobro.Venta.Id)</td>
            <td>@Html.DisplayFor(model => cobro.Venta.Cliente.Apellido), @Html.DisplayFor(modelItem => cobro.Venta.Cliente.Nombre)</td>
            <td>@Html.DisplayFor(model => cobro.Venta.MontoVendido)</td>
            <td>@Html.DisplayFor(model => cobro.Venta.MontoCobrado)</td>
            <td>@Html.DisplayFor(model => cobro.Venta.Saldo)</td>
            @if (crearRendicion)
            {
                var cuota = cobro.Venta.Cuotas.First(c => c.Estado != EstadoCuota.Pagada);

                <td>@Html.DisplayFor(model => cuota.Numero)/@Html.DisplayFor(model => cobro.Venta.PlanPago.CantidadCuotas)</td>
                <td class="text-center @(estado[cuota.Estado])">
                    <span class="text-@(estado[cuota.Estado])">
                        @cuota.Estado.GetDisplayName()
                    </span>
                </td>
            }
            else
            {
                var primerCuotaCancelada = cobro.Cuotas.First().Numero;
                var ultimaCuotaCancelada = cobro.Cuotas.Last().Numero;
                var intervalo = cobro.Cuotas.Count > 1
                    ? string.Format("{0} - {1}", primerCuotaCancelada, ultimaCuotaCancelada) 
                    : primerCuotaCancelada.ToString();
                
                <td>@intervalo / @cobro.Venta.CantidadCuotas</td>
            }
            <td>
                <div class="form-group form-group-sm" style="margin-left: 0;">
                    @Html.TextBoxFor(model => Model.Cobros[i].FechaCobro, "{0:dd/MM/yyyy}", new { @class = "form-control datepickerCobros fechaCobro" })
                </div>
            <td>
                <div class="form-group form-group-sm" style="margin-left: 0;">
                    <div class="input-group">
                        <div class="input-group-addon">$</div>
                        @Html.TextBoxFor(model => Model.Cobros[i].Monto, new { @class = "form-control montoCobro", maxlength = "8" })
                    </div>
                </div>
            </td>
            @Html.HiddenFor(model => Model.Cobros[i].VentaId)
            @Html.HiddenFor(model => Model.Cobros[i].Id)
        </tr>
    }
</table>
@Html.Hidden("ExistenVentasVigentes", Model.Cobros.Any(), new { id = "ExistenVentasVigentes" })

<script type="text/javascript">
    $(document).ready(function () {
        jQuery.validator.unobtrusive.parse("#formRendicion");
        @if (crearRendicion)
        {
            @:$("#Comision").val('@Model.Cobrador.PorcentajeComision');
                        }
    });

    $('.datepickerCobros').datepicker({
        language: 'es',
        todayBtn: 'linked',
        todayHighlight: true,
        orientation: "left top"
    });

    /*jQuery.validator.addClassRules("montoCobro", {
        min: 0,
        messages: {
            min: "El <b>Monto del cobro</b> debe ser mayor o igual a $ 0,00</b>"
        }
    });*/
</script>