@model ME.Libros.Web.Models.RendicionViewModel

@if (Model.Id > 0)
{
    <div class="row">
        <div class="col-md-12">
            <div class="form-group form-group-sm">
                @Html.LabelFor(r => r.Id, new { @class = "col-md-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(r => r.Id, new { @class = "form-control", disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.Label("PeriodoFake", "Periodo", new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.TextBox("PeriodoFake", "", new { id = "PeriodoFake", @class = "form-control", placeholder = "Periodo" })
                @Html.HiddenFor(r => r.Periodo, new { @class = "datepicker" })
            </div>
        </div>
    </div>
    <div class="col-md-6">

    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.CobradorId, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.DropDownListFor(r => r.CobradorId, Model.Cobradores, "Seleccione", new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.LocalidadId, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.DropDownListFor(r => r.LocalidadId, Model.Localidades, "Seleccione", new { @class = "form-control" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active">
                <a href="#TabCobros" aria-controls="TabCobros" role="tab" data-toggle="tab">Cobros</a>
            </li>
        </ul>
    </div>
</div>
<div class="row">
    <div id="rowCobros" class="col-md-12">
        <table class="dataTableCustom">
            <thead>
                <tr>
                    <th class="columnaCodigo noSort">@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.Id)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.ClienteId)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.MontoVendido)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.MontoCobrado)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Venta.Saldo)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Numero)</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].Cuotas[0].Estado) cuota</th>
                    <th>@Html.DisplayNameFor(model => model.Cobros[0].FechaCobro)</th>
                    <th class="numero">@Html.DisplayNameFor(model => model.Cobros[0].Monto)</th>
                </tr>
            </thead>
            <tbody id="resultado"></tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        @*Columna Vacia*@
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoFacturado, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoFacturado, new { @class = "form-control", placeholder = Messages.MontoFacturado, disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.Comision, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    @Html.TextBoxFor(r => r.Comision, new { @class = "form-control", placeholder = Messages.PorcentajeComision })
                    <div class="input-group-addon">%</div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoComision, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoComision, new { @class = "form-control", placeholder = Messages.MontoComision })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        @*Columna Vacia*@
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoNeto, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoNeto, new { @class = "form-control", placeholder = Messages.MontoNeto, disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
</div>
<div id="MsjSinVentasVigentes" class="row" style="display: none;">
    <div class="col-md-12">
        <div class="alert alert-warning" role="alert">
            No existen ventas vigentes para el cobrador y la localidad seleccionada.
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="alert alert-danger validationSummary @(ViewData.ModelState.IsValid ? "hide" : "")" role="alert">
            <a class="close" data-hide="alert" aria-hidden="true">×</a>
            <b>Mensajes:</b>
            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary().ToString()))
        </div>
    </div>
</div>

@Html.Hidden("DatosIngresados", "false")

<script type="text/javascript">
    $(document).ready(function () {
        $("#Periodo, #PeriodoFake").datepicker("setDate", new Date());
        $("#PeriodoFake").rules("add", {
            required: true,
            messages: {
                required: "El <b>Periodo</b> es requerido"
            }
        });
        
    });

    $('#PeriodoFake').datepicker({
        language: 'es',
        todayBtn: 'linked',
        todayHighlight: true,
        orientation: "left top",
        format: "MM yyyy"
    });

    $("#PeriodoFake").on("changeDate clearDate", function () {
        var periodoFake = $(this).datepicker('getDate');
        $('#Periodo').datepicker('setDate', periodoFake);
    });

    $('#LocalidadId, #CobradorId').on('change', function (e) {
        var datosIngresados = $("#DatosIngresados").val();
        if (datosIngresados == "true") {
            bootbox.confirm({
                title: "Advertencia",
                message: "Si usted modifica el Cobrador o la Localidad se perderán los cobros cargados. <br/>¿Esta seguro que desea continuar?",
                callback: function (result) {
                    if (result) {
                        cargarCobros();
                    } else {
                        // No cambiar el cobrador o localidad
                        
                    }
                }
            });
        }
        else {
            cargarCobros();
        }
    });

    $('#Comision').on('keyup change', function (e) {
        var montoFacturado = Globalize.parseFloat($("#MontoFacturado").val());
        var comision = Globalize.parseFloat($(this).val());
        var montoComision = montoFacturado * comision / 100;
        var montoNeto = montoFacturado - montoComision;
        $("#MontoComision").val(formatFloat(montoComision));
        $("#MontoNeto").val(formatFloat(montoNeto));
    });

    /*$(document).on("keyup", ".fechaCobro", function () {
        $("#DatosIngresados").val("true");
    });*/

    $(document).on("keyup change", ".montoCobro", function () {
        $("#DatosIngresados").val("true");
        var montoFacturado = 0;
        $(".montoCobro").each(function () {
            montoFacturado += Globalize.parseFloat($(this).val());
        });

        var comision = Globalize.parseFloat($("#Comision").val());
        var montoComision = montoFacturado * comision / 100;
        var montoNeto = montoFacturado - montoComision;
        $("#MontoFacturado").val(formatFloat(montoFacturado));
        $("#MontoComision").val(formatFloat(montoComision));
        $("#MontoNeto").val(formatFloat(montoNeto));
    });

    function cargarCobros() {
        $("#DatosIngresados").val("false");
        var localidadId = $("#LocalidadId :selected").val();
        var cobradorId = $("#CobradorId :selected").val();
        if (cobradorId > 0 && localidadId > 0) {
            $.ajax({
                method: "GET",
                url: '/Rendicion/ListarCobros',
                data: { cobradorId: cobradorId, localidadId: localidadId },
                dataType: "html",
                error: function (jqXHR, status, error) {
                    mensajeError("Error: " + error + " - Status: " + status);
                },
                success: function (data) {
                    var existenVentasVigentes = $(data).filter('input[name="ExistenVentasVigentes"]');
                    if (existenVentasVigentes.val() == "True") {
                        $("#MsjSinVentasVigentes").hide();
                        $("#rowCobros").html(data);
                        loadDataTable2();
                        $(".datepickerCobros").datepicker("clearDates");
                        var form = $("#formRendicion")
                            .removeData("validator") /* added by the raw jquery.validate plugin */
                            .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin */
                        jQuery.validator.unobtrusive.parse(form);
                        $('#formRendicion').validate().settings.ignore = false;
                    } else {
                        $("#MsjSinVentasVigentes").show();
                        clearTable();
                    }
                },
                timeout: 10000,
                cache: false
            });
        } else {
            $("#MsjSinVentasVigentes").hide();
            clearTable();
        }
    }

    function clearTable() {
        var table = $("#tablaResultado").dataTable();
        table.fnClearTable();
    }
</script>