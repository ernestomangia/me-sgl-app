@model ME.Libros.Web.Models.RendicionViewModel

@if (Model.Id > 0)
{
    <div class="row">
        <div class="col-md-12">
            <div class="form-group form-group-sm">
                @Html.LabelFor(r => r.Id, new { @class = "col-md-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(r => r.Id, new { @class = "form-control", disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.Label("PeriodoFake", "Periodo", new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.TextBox("PeriodoFake", "", new { id = "PeriodoFake", @class = "form-control", placeholder = "Periodo" })
                @*@Html.HiddenFor(r => r.Periodo, new { @class = "datepicker" })*@
                @Html.Hidden("Periodo", Model.Periodo.ToString("dd/MM/yyyy"), new { id = "Periodo", @class = "datepicker" })
            </div>
        </div>
    </div>
    <div class="col-md-6">

    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.CobradorId, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.DropDownListFor(r => r.CobradorId, Model.Cobradores, "Seleccione", new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.LocalidadId, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                @Html.DropDownListFor(r => r.LocalidadId, Model.Localidades, "Seleccione", new { @class = "form-control" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active">
                <a href="#TabCobros" aria-controls="TabCobros" role="tab" data-toggle="tab">Cobros</a>
            </li>
        </ul>
    </div>
</div>
<div class="row">
    <div id="rowCobros" class="col-md-12">
        @Html.Partial("ListarCobros", Model)
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        @*Columna Vacia*@
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoFacturado, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoFacturado, new { @class = "form-control", placeholder = Messages.MontoFacturado, disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.Comision, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    @Html.TextBoxFor(r => r.Comision, new { @class = "form-control", placeholder = Messages.PorcentajeComision, data_val_number = string.Format(ErrorMessages.DecimalF, Messages.PorcentajeComision), autocomplete = "off" })
                    <div class="input-group-addon">%</div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoComision, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoComision, new { @class = "form-control", placeholder = Messages.MontoComision, data_val_number = string.Format(ErrorMessages.Decimal, Messages.MontoComision), autocomplete = "off" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        @*Columna Vacia*@
    </div>
    <div class="col-md-6">
        <div class="form-group form-group-sm">
            @Html.LabelFor(r => r.MontoNeto, new { @class = "col-md-4 control-label" })
            <div class="col-md-8">
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.TextBoxFor(r => r.MontoNeto, new { @class = "form-control", placeholder = Messages.MontoNeto, disabled = "disabled" })
                </div>
            </div>
        </div>
    </div>
</div>
<div id="MsjSinVentasVigentes" class="row" style="display: none;">
    <div class="col-md-12">
        <div class="alert alert-warning" role="alert">
            No existen ventas vigentes para el cobrador y la localidad seleccionada.
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="alert alert-danger validationSummary @(ViewData.ModelState.IsValid ? "hide" : "")" role="alert">
            <a class="close" data-hide="alert" aria-hidden="true">×</a>
            <b>Mensajes:</b>
            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary().ToString()))
        </div>
    </div>
</div>

@Html.Hidden("DatosIngresados", "false")

<script type="text/javascript">
    $(document).ready(function () {
        $("#PeriodoFake").rules("add", {
            required: true,
            messages: {
                required: "@Html.Raw(string.Format(ErrorMessages.Requerido, "Periodo"))"
            }
        });

        $("#MontoComision").rules("add", {
            min: 0,
            messages: {
                min: "@Html.Raw(string.Format(ErrorMessages.MinValueF, Messages.MontoComision, "$ 0,00"))"
            }
        });
    });

    $('#PeriodoFake').datepicker({
        language: 'es',
        todayBtn: 'linked',
        todayHighlight: true,
        orientation: "left top",
        format: "MM yyyy",
        minViewMode: 1
    });

    $("#PeriodoFake").on("changeDate clearDate", function () {
        var periodoFake = $(this).datepicker('getDate');
        $('#Periodo').datepicker('setDate', periodoFake);
    });

    $('#Comision').on('keyup change', function (e) {
        if (isValidKeyForCalc(e.keyCode)) {
            var montoFacturado = Globalize.parseFloat($("#MontoFacturado").val());
            var comision = Globalize.parseFloat($(this).val());
            if (montoFacturado >= 0 && comision >= 0) {
                var montoComision = calcularMontoComision(montoFacturado, comision);
                var montoNeto = montoFacturado - montoComision;
                $("#MontoComision").val(formatFloat(montoComision));
                $("#MontoNeto").val(formatFloat(montoNeto));
            }
            else {
                $("#MontoComision").val("");
                $("#MontoNeto").val("");
            }
        }
    });

    $('#MontoComision').on('keyup change', function (e) {
        if (isValidKeyForCalc(e.keyCode)) {
            var montoFacturado = Globalize.parseFloat($("#MontoFacturado").val());
            var montoComision = Globalize.parseFloat($(this).val());
            if (montoFacturado > 0 && montoComision >= 0) {
                var comision = calcularComision(montoFacturado, montoComision);
                var montoNeto = montoFacturado - montoComision;
                $("#Comision").val(formatFloat(comision));
                $("#MontoNeto").val(formatFloat(montoNeto));
            }
            else {
                $("#Comision").val("");
                $("#MontoNeto").val("");
            }
        }
    });

    $(document).on("keyup change", ".montoCobro", function (e) {
        if (isValidKeyForCalc(e.keyCode)) {
            $("#DatosIngresados").val("true");
            var montoFacturado = calcularMontoFacturado();
            var comision = Globalize.parseFloat($("#Comision").val());
            if (montoFacturado >= 0) {
                $("#MontoFacturado").val(formatFloat(montoFacturado));
                if (comision >= 0) {
                    var montoComision = calcularMontoComision(montoFacturado, comision);
                    var montoNeto = montoFacturado - montoComision;
                    $("#MontoComision").val(formatFloat(montoComision));
                    $("#MontoNeto").val(formatFloat(montoNeto));
                }
                else {
                    $("#MontoComision").val("");
                    $("#MontoNeto").val("");
                }
            } else {
                $("#MontoFacturado").val("");
                $("#MontoComision").val("");
                $("#MontoNeto").val("");
            }
        }
    });

    function calcularMontoFacturado() {
        var montoFacturado = 0;
        $(".montoCobro").each(function () {
            montoFacturado += Globalize.parseFloat($(this).val());
            if (isNaN(montoFacturado)) {
                return false;
            }
        });

        return montoFacturado;
    }
</script>